{"version":3,"sources":["api/contact.ts","components/PopupConfirm.tsx","components/Popup.tsx","components/ContactItem.tsx","assets/sort-button.png","components/Contacts.tsx","components/Loading.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["url","getContacts","a","axios","get","then","response","data","catch","error","console","log","createContact","payload","post","contact","updateContact","id","rest","patch","info","deleteContact","delete","PopupConfirm","handlePopupClose","contactId","useContext","GlobalContext","getSortedContacts","setAlertStatus","className","onClick","result","Popup","type","useState","firstName","setFirstName","lastName","setLastName","job","setJob","description","setDescription","CurrentContactInfo","currentFirstName","currentLastName","currentJob","currentDescription","useEffect","htmlFor","name","value","onChange","e","target","first_name","last_name","createContext","ContactItem","props","popupConfirmStatus","setPopupConfirmStatus","popupStatus","setPopupStatus","Provider","style","width","height","Contacts","contactList","sortedList","setSortedList","sortDirection","setSortDirection","sortBy","setSortBy","list","sorted","sort","b","cur","toLowerCase","next","sortList","src","SortImage","alt","map","Loading","CircularProgress","Navbar","loading","App","contacts","setContacts","setLoading","alertStatus","finally","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","IconButton","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"scAEMA,EAAM,+CAUCC,EAAW,uCAAG,sBAAAC,EAAA,sEACZC,IAAMC,IAAN,UAAaJ,EAAb,kBACVK,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKA,QACjCC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAHP,mFAAH,qDAMXG,EAAa,uCAAG,WAAOC,GAAP,SAAAX,EAAA,sEACdC,IAAMW,KAAN,UAAcd,EAAd,iBAAkC,CAAEe,QAAQ,eAAMF,KAC5DR,MAAK,SAACC,GAAD,OAAcA,KACnBE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAHL,mFAAH,sDAMbO,EAAa,uCAAG,+BAAAd,EAAA,6DAASe,EAAT,EAASA,GAAOC,EAAhB,0BACdf,IAAMgB,MAAN,UAAenB,EAAf,yBAAmCiB,GAAM,CAAEG,KAAK,eAAMF,KAChEb,MAAK,SAACC,GAAD,OAAcA,KACnBE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAHL,mFAAH,sDAMbY,EAAa,uCAAG,WAAOJ,GAAP,SAAAf,EAAA,sEACdC,IAAMmB,OAAN,UAAgBtB,EAAhB,yBAAoCiB,IAC9CZ,MAAK,SAACC,GAAD,OAAcA,KACnBE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAHL,mFAAH,sD,eCiBXc,EArCM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,UACxC,EAA8CC,qBAAWC,GAAjDC,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,eAY3B,OACE,qBAAKC,UAAU,0BAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,oGACA,sBAAKA,UAAU,oBAAf,UACE,wBACEA,UAAU,SACVC,QAjBW,WACnBV,EAAcI,GAAWpB,MAAK,SAAA2B,GAG5B,OAFAH,GAAe,GACfD,IACOI,KAETR,GAAiB,IASX,oBADF,OAQE,wBACEM,UAAU,SACVC,QAAS,kBAAMP,GAAiB,IAFlC,6BCoGKS,G,MA1HD,SAAC,GAA2C,IAAzCT,EAAwC,EAAxCA,iBAAkBU,EAAsB,EAAtBA,KAAMjB,EAAgB,EAAhBA,GACvC,EAAkCkB,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsBJ,mBAAS,IAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEA,EAA8CjB,qBAAWC,GAAjDC,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,eAE3B,EAKIH,qBAAWkB,GAJFC,EADb,EACET,UACUU,EAFZ,EAEER,SACKS,EAHP,EAGEP,IACaQ,EAJf,EAIEN,YAyCF,OATAO,qBAAU,WACK,SAATf,IACFG,EAAaQ,GACbN,EAAYO,GACZL,EAAOM,GACPJ,EAAeK,MAEhB,IAGD,qBAAKlB,UAAU,kBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,6BAAc,WAATI,EAAoB,cAAgB,iBACzC,qBAAKJ,UAAU,cAAf,SACE,iCACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uBAAOoB,QAAQ,YAAf,0BACA,uBACEhB,KAAK,OACLiB,KAAK,YACLlC,GAAG,YACHmC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAaiB,EAAEC,OAAOH,aAG3C,sBAAKtB,UAAU,iBAAf,UACE,uBAAOoB,QAAQ,WAAf,yBACA,uBACEhB,KAAK,OACLiB,KAAK,WACLlC,GAAG,WACHmC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAYe,EAAEC,OAAOH,gBAI5C,sBAAKtB,UAAU,kBAAf,UACE,uBAAOoB,QAAQ,MAAf,mBACA,uBACEhB,KAAK,OACLiB,KAAK,MACLlC,GAAG,MACHmC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAOa,EAAEC,OAAOH,aAGrC,sBAAKtB,UAAU,kBAAf,UACE,uBAAOoB,QAAQ,cAAf,2BACA,0BACEC,KAAK,cACLlC,GAAG,cACHmC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAAeW,EAAEC,OAAOH,kBAKjD,sBAAKtB,UAAU,oBAAf,UACE,wBACEA,UAAU,SACVC,QA1FS,WACJ,WAATG,GACFtB,EAAc,CACZ4C,WAAYpB,EACZqB,UAAWnB,EACXE,MACAE,gBACCrC,MAAK,SAAA2B,GAGN,OAFAH,GAAe,GACfD,IACOI,KAGE,SAATE,GACFlB,EAAc,CACZC,KACAuC,WAAYpB,EACZqB,UAAWnB,EACXE,MACAE,gBACCrC,MAAK,SAAA2B,GAGN,OAFAH,GAAe,GACfD,IACOI,KAGXR,GAAiB,IA8DX,kBADF,OAQE,wBACEM,UAAU,SACVC,QAAS,kBAAMP,GAAiB,IAFlC,6BC7GGoB,EAAqBc,wBAAc,CAC9CzC,GAAI,EACJmB,UAAW,GACXE,SAAU,GACVE,IAAK,GACLE,YAAa,KAgDAiB,EA7CK,SAACC,GACnB,IAAQ3C,EAA8C2C,EAA9C3C,GAAImB,EAA0CwB,EAA1CxB,UAAWE,EAA+BsB,EAA/BtB,SAAUE,EAAqBoB,EAArBpB,IAAKE,EAAgBkB,EAAhBlB,YACtC,EAAoDP,oBAAS,GAA7D,mBAAO0B,EAAP,KAA2BC,EAA3B,KACA,EAAsC3B,oBAAS,GAA/C,mBAAO4B,EAAP,KAAoBC,EAApB,KAEA,OACE,sBAAKlC,UAAU,yBAAf,UAEI+B,GACE,cAAC,EAAD,CAAcrC,iBAAkBsC,EAAuBrC,UAAWR,IAIpE8C,GACE,cAACnB,EAAmBqB,SAApB,CAA6Bb,MAAOQ,EAApC,SACE,cAAC,EAAD,CAAOpC,iBAAkBwC,EAAgB9B,KAAK,OAAOjB,GAAIA,MAI/D,sBAAKa,UAAU,eAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,cAAC,IAAD,CAAYoC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAC3C,iCAAOhC,EAAP,IAAmBE,QAErB,sCAASE,KACT,8CAAiBE,QAEnB,sBAAKZ,UAAU,eAAf,UACE,wBACEA,UAAU,6BACVC,QAAS,kBAAMiC,GAAe,IAFhC,kBAMA,wBACElC,UAAU,6BACVC,QAAS,kBAAM+B,GAAsB,IAFvC,2BCxDO,G,MAAA,IAA0B,yCC6E1BO,EAhEE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAClB,EAAoCnC,mBAAoBmC,GAAxD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CrC,mBAAwB,OAAlE,mBAAOsC,EAAP,KAAsBC,EAAtB,KACA,EAA4BvC,mBAAwB,cAApD,mBAAOwC,EAAP,KAAeC,EAAf,KAsBA,OAJA3B,qBAAU,YAhBO,SAAC4B,EAAiBF,EAAuBF,GACxD,GAAKI,EAAL,CAEA,IAAMC,EAASD,EAAKE,MAAK,SAAC7E,EAAY8E,GACpC,IAAMC,EAAO/E,EAAE,GAAD,OAAIyE,IAAsCO,cAClDC,EAAQH,EAAE,GAAD,OAAIL,IAAsCO,cACzD,MAAsB,QAAlBT,EACKQ,EAAME,EAAO,GAAK,EAElBF,EAAME,EAAO,GAAK,KAI7BX,EAAcM,IAIdM,CAASd,EAAaK,EAAQF,KAC7B,CAACF,EAAYI,EAAQF,EAAeH,IAGrC,gCACE,sBAAKxC,UAAU,mBAAf,UACE,0CACA,sBAAKA,UAAU,eAAf,UACE,yBAAQqB,KAAK,SAASE,SAAU,SAACC,GAAD,OAAOsB,EAAUtB,EAAEC,OAAOH,QAA1D,UACE,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,MAAd,oBAEF,qBACEiC,IAAKC,EACLC,IAAI,OACJzD,UAA6B,QAAlB2C,EAA0B,GAAK,SAC1C1C,QAAS,kBAAM2C,EAAmC,QAAlBD,EAA0B,OAAS,gBAIzE,oBAAI3C,UAAU,yBAAd,SAEIyC,GAAcA,EAAWiB,KAAI,gBAC3BvE,EAD2B,EAC3BA,GAAIuC,EADuB,EACvBA,WAAYC,EADW,EACXA,UAAWjB,EADA,EACAA,IAAKE,EADL,EACKA,YADL,OAG3B,oBAAaZ,UAAU,oBAAvB,SACE,cAAC,EAAD,CACEb,GAAIA,EACJmB,UAAWoB,EACXlB,SAAUmB,EACVjB,IAAKA,EACLE,YAAaA,KANRzB,Y,SCnDNwE,EARC,WACd,OACE,qBAAK3D,UAAU,qBAAf,SACE,cAAC4D,EAAA,EAAD,CAAkB5D,UAAU,cCsCnB6D,G,MA9BA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAChB,EAAsCzD,oBAAS,GAA/C,mBAAO4B,EAAP,KAAoBC,EAApB,KAEA,OACE,sBAAKlC,UAAU,gBAAf,UAEIiC,GACE,cAAC,EAAD,CAAOvC,iBAAkBwC,EAAgB9B,KAAK,WAGlD,8BACE,6BACE,kDAKH0D,GAAW,cAAC,EAAD,IACZ,8BACE,wBACE9D,UAAU,SACVC,QAAS,kBAAMiC,GAAe,IAFhC,gCCVKrC,EAAgB+B,wBAAuB,IA8CrCmC,EA5CH,WACV,MAAgC1D,qBAAhC,mBAAO2D,EAAP,KAAiBC,EAAjB,KACA,EAA8B5D,oBAAS,GAAvC,mBAAOyD,EAAP,KAAgBI,EAAhB,KACA,EAAsC7D,oBAAS,GAA/C,mBAAO8D,EAAP,KAAoBpE,EAApB,KAEMD,EAAoB,WACxBoE,GAAW,GACX/F,IACGI,MAAK,SAAA2B,GAAM,OAAI+D,EAAY/D,MAC3BkE,SAAQ,kBAAMF,GAAW,OAO9B,OAJA/C,qBAAU,WACRrB,MACC,IAGD,sBAAKE,UAAU,MAAf,UACE,cAACqE,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,KAAMN,EACNO,iBAAkB,IAClBC,QAAS,kBAAM5E,GAAe,IAC9B6E,QAAQ,oBACRC,OACE,cAAC,WAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,QAIN1C,MAAO,CAAE2C,WAAY,yBAEvB,eAAClF,EAAcsC,SAAf,CAAwBb,MAAO,CAAExB,oBAAmBC,kBAApD,UACE,cAAC,EAAD,CAAQ+D,QAASA,IAChBE,GAAY,cAAC,EAAD,CAAUxB,YAAawB,WChD7BgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3G,MAAK,YAAkD,IAA/C4G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e26b4768.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://taroko-contacts-server.herokuapp.com';\n\ninterface ContactInfo {\n  id?: number;\n  first_name: string;\n  last_name: string;\n  job: string;\n  description: string;\n}\n\nexport const getContacts = async () => {\n  return await axios.get(`${url}/api/contacts`)\n    .then((response) => response.data.data)\n    .catch((error) => console.log(error));\n};\n\nexport const createContact = async (payload: ContactInfo) => {\n  return await axios.post(`${url}/api/contacts`, { contact: { ...payload } })\n    .then((response) => response)\n    .catch((error) => console.log(error))\n}\n\nexport const updateContact = async ({ id, ...rest }: ContactInfo) => {\n  return await axios.patch(`${url}/api/contacts/${id}`, { info: { ...rest } })\n    .then((response) => response)\n    .catch((error) => console.log(error))\n}\n\nexport const deleteContact = async (id: number) => {\n  return await axios.delete(`${url}/api/contacts/${id}`)\n    .then((response) => response)\n    .catch((error) => console.log(error))\n}","import { useContext } from 'react';\nimport { deleteContact } from '../api/contact';\nimport { GlobalContext } from '../App';\nimport './styles/popupConfirm.scss';\n\ninterface Props {\n  handlePopupClose: (status: boolean) => void;\n  contactId: number;\n}\n\nconst PopupConfirm = ({ handlePopupClose, contactId }: Props) => {\n  const { getSortedContacts, setAlertStatus } = useContext(GlobalContext);\n\n  const handleDelete = () => {\n    deleteContact(contactId).then(result => {\n      setAlertStatus(true);\n      getSortedContacts();\n      return result;\n    });\n    handlePopupClose(false);\n  }\n\n\n  return (\n    <div className=\"popup-confirm-container\">\n      <div className=\"popup-confirm-inner\">\n        <p>Are you sure you want to delete this contact? This is irreversible.</p>\n        <div className=\"form-button-group\">\n          <button\n            className=\"button\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n          &nbsp;\n          <button\n            className=\"button\"\n            onClick={() => handlePopupClose(false)}\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PopupConfirm\n","import { useContext, useEffect, useState } from 'react';\n\nimport './styles/popup.scss';\nimport { createContact, updateContact } from '../api/contact';\nimport { CurrentContactInfo } from './ContactItem';\nimport { GlobalContext } from '../App';\n\ninterface Props {\n  handlePopupClose: (status: boolean) => void;\n  type: 'create' | 'edit';\n  id?: number;\n}\n\nconst Popup = ({ handlePopupClose, type, id }: Props) => {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [job, setJob] = useState('');\n  const [description, setDescription] = useState('');\n\n  const { getSortedContacts, setAlertStatus } = useContext(GlobalContext);\n\n  const {\n    firstName: currentFirstName,\n    lastName: currentLastName,\n    job: currentJob,\n    description: currentDescription,\n  } = useContext(CurrentContactInfo);\n\n  const handleSave = () => {\n    if (type === 'create') {\n      createContact({\n        first_name: firstName,\n        last_name: lastName,\n        job,\n        description,\n      }).then(result => {\n        setAlertStatus(true);\n        getSortedContacts();\n        return result;\n      });\n    };\n    if (type === 'edit') {\n      updateContact({\n        id,\n        first_name: firstName,\n        last_name: lastName,\n        job,\n        description,\n      }).then(result => {\n        setAlertStatus(true);\n        getSortedContacts();\n        return result;\n      });\n    }\n    handlePopupClose(false);\n  };\n\n  useEffect(() => {\n    if (type === 'edit') {\n      setFirstName(currentFirstName);\n      setLastName(currentLastName);\n      setJob(currentJob);\n      setDescription(currentDescription);\n    };\n  }, []);\n\n  return (\n    <div className=\"popup-container\">\n      <div className=\"popup-form\">\n        <h1>{type === 'create' ? 'Add Contact' : 'Edit Contact'}</h1>\n        <div className=\"popup-inner\">\n          <form>\n            <div className=\"full-name\">\n              <div className=\"fieldset-names\">\n                <label htmlFor=\"firstName\">First Name: </label>\n                <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  id=\"firstName\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                />\n              </div>\n              <div className=\"fieldset-names\">\n                <label htmlFor=\"lastName\">Last Name: </label>\n                <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  id=\"lastName\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"fieldset-others\">\n              <label htmlFor=\"job\">Job: </label>\n              <input\n                type=\"text\"\n                name=\"job\"\n                id=\"job\"\n                value={job}\n                onChange={(e) => setJob(e.target.value)}\n              />\n            </div>\n            <div className=\"fieldset-others\">\n              <label htmlFor=\"description\">Description: </label>\n              <textarea\n                name=\"description\"\n                id=\"description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </div>\n          </form>\n        </div>\n        <div className=\"form-button-group\">\n          <button\n            className=\"button\"\n            onClick={handleSave}\n          >\n            Save\n          </button>\n          &nbsp;\n          <button\n            className=\"button\"\n            onClick={() => handlePopupClose(false)}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import './styles/contactItem.scss';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { createContext, useState } from 'react';\nimport PopupConfirm from './PopupConfirm';\nimport Popup from './Popup';\n\ninterface Props {\n  id: number;\n  firstName: string;\n  lastName: string;\n  job: string;\n  description: string;\n}\n\nexport const CurrentContactInfo = createContext({\n  id: 0,\n  firstName: '',\n  lastName: '',\n  job: '',\n  description: '',\n});\n\nconst ContactItem = (props: Props) => {\n  const { id, firstName, lastName, job, description } = props;\n  const [popupConfirmStatus, setPopupConfirmStatus] = useState(false);\n  const [popupStatus, setPopupStatus] = useState(false);\n\n  return (\n    <div className=\"contact-item-container\">\n      {\n        popupConfirmStatus && (\n          <PopupConfirm handlePopupClose={setPopupConfirmStatus} contactId={id} />\n        )\n      }\n      {\n        popupStatus && (\n          <CurrentContactInfo.Provider value={props}>\n            <Popup handlePopupClose={setPopupStatus} type=\"edit\" id={id} />\n          </CurrentContactInfo.Provider>\n        )\n      }\n      <div className=\"contact-info\">\n        <div className=\"contact-info__icon-and-name\">\n          <PersonIcon style={{ width: '2em', height: '2em' }} />\n          <span>{firstName} {lastName}</span>\n        </div>\n        <p>Job: {job}</p>\n        <p>Description: {description}</p>\n      </div>\n      <div className=\"button-group\">\n        <button\n          className=\"button contact-item-button\"\n          onClick={() => setPopupStatus(true)}\n        >\n          Edit\n        </button>\n        <button\n          className=\"button contact-item-button\"\n          onClick={() => setPopupConfirmStatus(true)}\n        >\n          Delete\n        </button>\n      </div>\n    </div >\n  )\n}\n\nexport default ContactItem\n","export default __webpack_public_path__ + \"static/media/sort-button.7cec2c9c.png\";","import { useEffect, useState } from 'react';\n\nimport ContactItem from './ContactItem';\nimport './styles/contacts.scss';\nimport SortImage from '../assets/sort-button.png';\nimport { Contact } from '../App';\n\ntype SortDirection = 'asc' | 'desc';\n\ninterface Props {\n  contactList: Contact[];\n}\n\nconst Contacts = ({ contactList }: Props) => {\n  const [sortedList, setSortedList] = useState<Contact[]>(contactList);\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n  const [sortBy, setSortBy] = useState<keyof Contact>('first_name');\n\n  const sortList = (list: Contact[], sortBy: keyof Contact, sortDirection: SortDirection) => {\n    if (!list) return;\n\n    const sorted = list.sort((a: Contact, b: Contact) => {\n      const cur = (a[`${sortBy}` as keyof Contact] as string).toLowerCase();\n      const next = (b[`${sortBy}` as keyof Contact] as string).toLowerCase();\n      if (sortDirection === 'asc') {\n        return cur > next ? 1 : -1;\n      } else {\n        return cur < next ? 1 : -1;\n      };\n    });\n\n    setSortedList(sorted);\n  };\n\n  useEffect(() => {\n    sortList(contactList, sortBy, sortDirection);\n  }, [sortedList, sortBy, sortDirection, contactList]);\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <h1>Contacts</h1>\n        <div className=\"sort-control\">\n          <select name=\"sortBy\" onChange={(e) => setSortBy(e.target.value as keyof Contact)}>\n            <option value=\"first_name\">First Name</option>\n            <option value=\"last_name\">Last Name</option>\n            <option value=\"job\">Job</option>\n          </select>\n          <img\n            src={SortImage}\n            alt=\"sort\"\n            className={sortDirection === 'asc' ? '' : 'rotate'}\n            onClick={() => setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')}\n          />\n        </div>\n      </div>\n      <ul className=\"contact-list-container\">\n        {\n          sortedList && sortedList.map(({\n            id, first_name, last_name, job, description,\n          }) => (\n            <li key={id} className=\"contact-list-item\">\n              <ContactItem\n                id={id}\n                firstName={first_name}\n                lastName={last_name}\n                job={job}\n                description={description}\n              />\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default Contacts;\n","import { CircularProgress } from \"@material-ui/core\"\n\nconst Loading = () => {\n  return (\n    <div className=\"loading-background\">\n      <CircularProgress className=\"circle\" />\n    </div>\n  );\n};\n\nexport default Loading;\n","import { useState } from 'react';\n\nimport Loading from './Loading';\nimport Popup from './Popup';\nimport './styles/navbar.scss';\nimport { createContext } from 'react';\n\ninterface Props {\n  loading: boolean;\n}\n\nexport const SetAlertStatus = createContext(() => { })\n\nconst Navbar = ({ loading }: Props) => {\n  const [popupStatus, setPopupStatus] = useState(false);\n\n  return (\n    <div className=\"nav-container\">\n      {\n        popupStatus && (\n          <Popup handlePopupClose={setPopupStatus} type=\"create\" />\n        )\n      }\n      <nav>\n        <ul>\n          <li>\n            Contact List\n          </li>\n        </ul>\n      </nav>\n      {loading && <Loading />}\n      <div>\n        <button\n          className=\"button\"\n          onClick={() => setPopupStatus(true)}\n        >\n          Add Contact\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { createContext, useEffect, useState, Fragment, Dispatch, SetStateAction } from 'react';\nimport { IconButton, Snackbar } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport './App.css';\nimport Contacts from './components/Contacts';\nimport Navbar from './components/Navbar';\nimport { getContacts } from './api/contact';\n\nexport interface Contact {\n  id: number;\n  first_name: string;\n  last_name: string;\n  job: string;\n  description: string;\n}\n\nexport interface Context {\n  getSortedContacts: () => void;\n  setAlertStatus: Dispatch<SetStateAction<boolean>>;\n}\n\nexport const GlobalContext = createContext<Context>({} as Context);\n\nconst App = () => {\n  const [contacts, setContacts] = useState<Contact[]>();\n  const [loading, setLoading] = useState(false);\n  const [alertStatus, setAlertStatus] = useState(false);\n\n  const getSortedContacts = () => {\n    setLoading(true);\n    getContacts()\n      .then(result => setContacts(result))\n      .finally(() => setLoading(false))\n  };\n\n  useEffect(() => {\n    getSortedContacts();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        open={alertStatus}\n        autoHideDuration={5000}\n        onClose={() => setAlertStatus(false)}\n        message=\"Contacts updated!\"\n        action={\n          <Fragment>\n            <IconButton>\n              <CloseIcon />\n            </IconButton>\n          </Fragment>\n        }\n        style={{ fontFamily: '\"Pangolin\", cursive' }}\n      />\n      <GlobalContext.Provider value={{ getSortedContacts, setAlertStatus }}>\n        <Navbar loading={loading} />\n        {contacts && <Contacts contactList={contacts} />}\n      </GlobalContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}